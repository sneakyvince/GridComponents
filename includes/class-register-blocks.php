<?php
/**
 * Register block scripts and styles.
 *
 * @package EsnextExample
 */

namespace EsnextExample;

use \EsnextExample\Plugin as Plugin;

// Stop the hackers if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Register blocks.
 *
 * @since 1.0.0
 */
class Register_Blocks {
	/**
	 * Register class with appropriate WordPress hooks
	 */
	public static function register() {
		$instance = new self();
		add_action( 'init', array( $instance, 'register_blocks' ) );
		add_action( 'wp_enqueue_scripts', array( $instance, 'enqueue_frontend_scripts' ) );
	}

	/**
	 * Registers all frontend scripts so we can use react on the frontend.
	 *
	 * @return void
	 */
	public function enqueue_frontend_scripts() {
		// Shortcuts for variables.
		$instance        = Plugin::get_instance();
		$slug            = $instance->slug;
		$plugin_dir_path = $instance->plugin_dir_path;
		$plugin_dir_url  = $instance->plugin_dir_url;

		// Register frontend scripts.
		// Dynamically load dependencies using front.asset.php generated by
		// @wordpress/dependency-extraction-webpack-plugin.
		$script_asset = require "$plugin_dir_path/build/frontend.asset.php";

		wp_enqueue_script(
			$slug . '-frontend',
			$plugin_dir_url . 'build/frontend.js',
			$script_asset['dependencies'],
			$script_asset['version'],
			true
		);
	}

	/**
	 * Registers all block assets so they can be enqueued through Gutenberg.
	 *
	 * @return void
	 */
	public function register_blocks() {

		if ( ! function_exists( 'register_block_type' ) ) {
			// Gutenberg is not active.
			return;
		}

		// Shortcuts for variables.
		$instance        = Plugin::get_instance();
		$slug            = $instance->slug;
		$text_domain     = $instance->text_domain;
		$plugin_dir_path = $instance->plugin_dir_path;
		$plugin_dir_url  = $instance->plugin_dir_url;
		$version         = $instance->version;

		// Register block specific frontend & backend styles.
		wp_register_style(
			$slug . '-block',
			$plugin_dir_url . 'build/style.css',
			array(),
			$version
		);

		// Register editor-only block styles.
		wp_register_style(
			$slug . '-block-editor',
			$plugin_dir_url . 'build/editor.css',
			array( 'wp-edit-blocks' ),
			$version
		);

		// Enqueue tailwind styles.
		wp_enqueue_style(
			$slug . '-tailwind',
			$plugin_dir_url . 'build/tailwind.css',
			array(),
			$version
		);

		$script_asset_path = "$plugin_dir_path/build/index.asset.php";
		if ( ! file_exists( $script_asset_path ) ) {
			throw new Error(
				'You need to run `npm start` or `npm run build` for the "esnext-example" blocks first.'
			);
		}

		// Register editor-only block scripts.
		// Dynamically load dependencies using index.build.asset.php generated by
		// @wordpress/dependency-extraction-webpack-plugin.
		$script_asset = require "$plugin_dir_path/build/index.asset.php";

		wp_register_script(
			$slug . '-block-editor',
			$plugin_dir_url . 'build/index.js',
			$script_asset['dependencies'],
			$script_asset['version'],
			true
		);

		// Automatically register blocks.
		// Do not register dynamic block's here, this is done directly in dynamic block .php file.
		$blocks = array();
		$dir    = new \DirectoryIterator( "$plugin_dir_path/src/blocks" );

		foreach ( $dir as $fileinfo ) {
			if ( ! $fileinfo->isDot() ) {
				$block_dir     = new \DirectoryIterator( "$plugin_dir_path/src/blocks/$fileinfo" );
				$dynamic_block = false;

				foreach ( $block_dir as $file ) {
					if ( strpos( $file, '.php' ) !== false ) {
						$dynamic_block = true;
					}
				}

				if ( $dynamic_block ) {
					continue;
				}
				$blocks[] = $slug . '/' . $fileinfo->getFilename();
			}
		}

		/*
		Alternatively manually register blocks
		Array of all blocks.
		Add to array to add blocks.
		$blocks = [
		$slug . '/block',
		];
		*/

		// Loop through $blocks array and register blocks.
		// For reference: https://developer.wordpress.org/block-editor/tutorials/block-tutorial/writing-your-first-block-type/.
		foreach ( $blocks as $block ) {
			register_block_type(
				$block,
				array(
					'style'         => $slug . '-block',
					'editor_script' => $slug . '-block-editor',
					'editor_style'  => $slug . '-block-editor',
				)
			);
		}
	}
}
